https://leetcode.com/problems/car-pooling/

Naive:

class Solution:
        
    def markTrip(self,l:List,trip:List) -> List:
        for i in range(trip[1],trip[2]):
            l[i] = l[i] + trip[0]
        return l
            
    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:
        
        l = [0] * 1000
        
        for i in trips:
            l = self.markTrip(l,i)
            
        print(l)
            
        for i in l:
            if i > capacity:
                return False
        return True
            
Optimised 1:

class Solution:

    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:
        
        l = [0] * 1000
        s= 0
        for trip in trips:
            l[trip[1]] = l[trip[1]] + trip[0]
            l[trip[2]] = l[trip[2]] - trip[0]
            
            if trip[2] > s:
                s = trip[2]
            
            
        for i in range(1,s+1):
            l[i] = l[i] + l[i-1]
            if l[i] > capacity:
                return False
        return True
        
        
Memory Optimised


class Solution:

    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:
        
        s= 0
            
        for trip in trips:
            if trip[2] > s:
                s = trip[2]
            
                
        l = [0] * (s+1)
       
        for trip in trips:
            l[trip[1]] = l[trip[1]] + trip[0]
            l[trip[2]] = l[trip[2]] - trip[0]            
            
        for i in range(1,s+1):
            l[i] = l[i] + l[i-1]
            if l[i] > capacity:
                return False
        return True
            
       
       
       https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/
       
       class Solution:
    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        l = []
        for i in matrix:
            l = l + i
            
        l.sort()
        return l[k-1]
        
            
        
